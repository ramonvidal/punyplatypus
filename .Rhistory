Endo=two,
Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
RNA<-list(
# Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fibro=one,
#Endo=two
#Endothelial_meth=unique(as.character(methy[methy$cluster=="0" & !grepl("-",methy$avg_diff),]$SYMBOL)),
#Fibro_meth=unique(as.character(methy[methy$cluster=="1" & !grepl("-",methy$avg_diff),]$SYMBOL))
Fibro=one,
Endo=two
)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endo=two,
Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
RNA<-list(
# Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fibro=one,
#Endo=two
#Endothelial_meth=unique(as.character(methy[methy$cluster=="0" & !grepl("-",methy$avg_diff),]$SYMBOL)),
#Fibro_meth=unique(as.character(methy[methy$cluster=="1" & !grepl("-",methy$avg_diff),]$SYMBOL))
Fibro=one,
Endo=two
)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL))
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endo=two,
#Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
RNA<-list(
# Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fibro=one,
#Endo=two
#Endothelial_meth=unique(as.character(methy[methy$cluster=="0" & !grepl("-",methy$avg_diff),]$SYMBOL)),
#Fibro_meth=unique(as.character(methy[methy$cluster=="1" & !grepl("-",methy$avg_diff),]$SYMBOL))
Fibro_w=one,
Endo_w=two
)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL))
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endo=two,
#Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
gom.obj
gom.obj@go.nested.list
RNA<-list(
Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
Fibro_exp=as.character(express[express$avg_diff<0,]$X),
#Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fibro=one,
#Endo=two
#Endothelial_meth=unique(as.character(methy[methy$cluster=="0" & !grepl("-",methy$avg_diff),]$SYMBOL)),
#Fibro_meth=unique(as.character(methy[methy$cluster=="1" & !grepl("-",methy$avg_diff),]$SYMBOL))
#Fibro_w=one,
#Endo_w=two
)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endo=two,
Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
RNA<-list(
Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
Fibro_exp=as.character(express[express$avg_diff<0,]$X)
#Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Fibro=one,
#Endo=two
#Endothelial_meth=unique(as.character(methy[methy$cluster=="0" & !grepl("-",methy$avg_diff),]$SYMBOL)),
#Fibro_meth=unique(as.character(methy[methy$cluster=="1" & !grepl("-",methy$avg_diff),]$SYMBOL))
#Fibro_w=one,
#Endo_w=two
)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endo=two,
Fibro=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
DNA<-list(
#  Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#  Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endothelial_meth=unique(as.character(methy2[methy2$cluster=="0" & grepl("-",methy2$avg_diff),]$SYMBOL)),
Fib_meth=unique(as.character(methy2[methy2$cluster=="1" & grepl("-",methy2$avg_diff),]$SYMBOL)),
#Endothelial2_meth=unique(as.character(methy[methy$cluster=="0" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Fib_meth2=unique(as.character(methy[methy$cluster=="1" & grepl("-",methy$avg_diff),]$SYMBOL)),
#Endothelial_exp=as.character(express[express$avg_diff>0,]$X),
#Fibro_exp=as.character(express[express$avg_diff<0,]$X),
Endo_w=two,
Fibro_w=one
)
head(DNA)
RNASeq=20000
gom.obj <- newGOM(RNA, DNA, RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
H<-drawHeatmap(gom.obj, grid.col="Blues",adj.p=T, note.col = "black", log.scale = TRUE)
gom.obj@go.nested.list
#Step 1: Read in files
#The input to the PDclust workflow is a named list of data frames containing CpG calls for each single-cell.
#The four columns should be named as follows: chr, start, end, meth (for percent methylation).
library(PDclust)
library(ggplot2)
library(pheatmap)
library(dplyr)
library(bsseq)
load("~/cpg_files_EndoFib_pairwise_prom_multiproc.RData")
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
test<-as.data.frame(cpg_files_pairwise_matrix)
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 4)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 2)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
cpg_files_pairwise_matrix
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
cpg_files_pairwise_matrix
cpg_files_pairwise_matrix["8104_A11",]
cpg_files_pairwise_matrix[!"8104_A11",]
cpg_files_pairwise_matrix["8104_A11","8104_A11"]
cpg_files_pairwise
cpg_files_pairwise<-cpg_files_pairwise[cpg_files_pairwise$x=="8104_A11",]
cpg_files_pairwise<-cpg_files_pairwise[cpg_files_pairwise$y=="8104_A11",]
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
load("~/cpg_files_EndoFib_pairwise_prom_multiproc.RData")
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$x=="8104_A11",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$y=="8104_A11",]
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
test<-as.data.frame(cpg_files_pairwise_matrix)
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 2)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
cpg_files_pairwise_matrix
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$x=="8104_A2",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$y=="8104_A2",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$x=="8104_A8",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$y=="8104_A8",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$x=="8104_A9",]
cpg_files_pairwise<-cpg_files_pairwise[!cpg_files_pairwise$y=="8104_A9",]
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
test<-as.data.frame(cpg_files_pairwise_matrix)
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 2)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
cpg_files_pairwise
cpg_files_pairwise_matrix
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
cpg_files_pairwise
cpg_files_pairwise[is.na(cpg_files_pairwise$num_cpgs),]
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
head(cpg_files_pairwise_matrix)
head(cpg_files_pairwise_matrix, 20)
corner(cpg_files_pairwise_matrix, 20)
library(useful)
corner(cpg_files_pairwise_matrix, 20)
corner(cpg_files_pairwise_matrix, 30)
corner(cpg_files_pairwise_matrix, 40)
corner(cpg_files_pairwise_matrix, 50)
corner(cpg_files_pairwise_matrix, 60)
corner(cpg_files_pairwise_matrix, 70)
corner(cpg_files_pairwise_matrix, 80)
corner(cpg_files_pairwise_matrix, 90)
corner(cpg_files_pairwise_matrix, 100)
corner(cpg_files_pairwise_matrix, 110)
corner(cpg_files_pairwise_matrix, 120)
corner(cpg_files_pairwise_matrix, 130)
corner(cpg_files_pairwise_matrix, 140)
corner(cpg_files_pairwise_matrix, 150)
corner(cpg_files_pairwise_matrix, 160)
corner(cpg_files_pairwise_matrix, 170)
corner(cpg_files_pairwise_matrix, 180)
corner(cpg_files_pairwise_matrix, 190)
corner(cpg_files_pairwise_matrix, 200)
cpg_files_pairwise$pairwise_dissimilarity
is.na(cpg_files_pairwise$pairwise_dissimilarity)
cpg_files_pairwise[(cpg_files_pairwise$pairwise_dissimilarity==""),]
cpg_files_pairwise[(cpg_files_pairwise$pairwise_dissimilarity==0),]
cpg_files_pairwise[(cpg_files_pairwise$pairwise_dissimilarity==11.637023),]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity==11.637023,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity>11.637023,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<0,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<1,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<3,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<4,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<6,]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<8,]
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 2)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
cpg_files_pairwise_matrix[is.na(cpg_files_pairwise_matrix)]
cpg_files_pairwise_matrix[is.na(cpg_files_pairwise_matrix),]
cpg_files_pairwise[cpg_files_pairwise$pairwise_dissimilarity<8,]
cpg_files_pairwise[cpg_files_pairwise$int<8,]
cpg_files_pairwise$int<8
cpg_files_pairwise[cpg_files_pairwise$num_cpgs<8,]
cpg_files_pairwise[cpg_files_pairwise$num_cpgs<1000,]
cpg_files_pairwise[cpg_files_pairwise$num_cpgs<10000,]
cpg_files_pairwise[cpg_files_pairwise$num_cpgs<100000,]
cpg_files_pairwise[cpg_files_pairwise$num_cpgs<30000,]
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
corner(cpg_files_pairwise_matrix, 20)
test<-as.data.frame(cpg_files_pairwise_matrix)
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 2)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
viz_df
#You can plot the resulting cluster results:
plot(cluster_results$hclust_obj)
#cluster_results$cluster_assignments
heatmap_pallete <- colorRampPalette(RColorBrewer::brewer.pal(8, name = "YlOrRd"))(21)
pheatmap(cpg_files_pairwise_matrix,
cluster_rows = cluster_results$hclust_obj,
cluster_cols = cluster_results$hclust_obj,
treeheight_row = 0,
border_color = NA,
color = heatmap_pallete,
show_colnames = F,
annotation_col = cluster_results$cluster_assignments)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
RNA
DNA
as.matrix(prom.zip)
as.matrix(DNA)
load("~/CF_Sequencing//work_dir/rvidal/Heart_Aging_Ramon/ALL_bams/cpg_files_pairwise_multiproc.RData")
load("~/CF_Sequencing//work_dir/rvidal/Heart_Aging_Ramon/ALL_bams/CONCAT/cpg_files_pairwise_multiproc.RData")
load("/Volumes/fast//CF_Sequencing//work_dir/rvidal/Heart_Aging_Ramon/ALL_bams/CONCAT/cpg_files_pairwise_multiproc.RData")
cpg_files_pairwise_matrix <- convert_to_dissimilarity_matrix(cpg_files_pairwise)
test<-as.data.frame(cpg_files_pairwise_matrix)
cpg_files_pairwise[is.na(cpg_files_pairwise$pairwise_dissimilarity),]
#This step clusters the single-cells together with cluster_dissimilarity()
cluster_results <- cluster_dissimilarity(cpg_files_pairwise_matrix, num_clusters = 4)
#This function projects the dissimilarities into 2D space (using cmdscale), and appends clustering results (if included) for easy coloring in ggplot later
viz_df <- visualize_clusters(cpg_files_pairwise_matrix, cluster_labels = cluster_results$cluster_assignments)
viz_df
ggplot(viz_df, aes(V1, V2, color = cluster)) +
geom_point()
##############################
load(file="/Volumes/fast/AG_Sauer/projects/rvidal_RData/heart_smartSeq.RData")
smartseqcells<-as.data.frame(c("8251_A2",
"8251_D1",
"8251_F8",
"8253_D2",
"8251_G10",
"8104_F4",
"8249_D5",
"8251_E4",
"8250_C5",
"8251_G2",
"8250_B8",
"8249_F6",
"8250_C10",
"8250_B9",
"8250_H7",
"8249_E7"))
smartseqcells$cellname<-gsub("_.+_", "_", (smartseqcells$`c("8251_A2", "8251_D1", "8251_F8", "8253_D2", "8251_G10", "8104_F4", "8249_D5", "8251_E4", "8250_C5", "8251_G2", "8250_B8", "8249_F6", "8250_C10", "8250_B9", "8250_H7", "8249_E7")`
))
smartseqcells$cellname<-gsub("L001", "8104", smartseqcells$cellname)
smartseqcells$cellname<-gsub("L002", "8249", smartseqcells$cellname)
smartseqcells$cellname<-gsub("L003", "8250", smartseqcells$cellname)
smartseqcells$cellname<-gsub("L004", "8251", smartseqcells$cellname)
smartseqcells$cellname<-gsub("L005", "8253", smartseqcells$cellname)
smartseqcells$cellname<-gsub("L006", "8254", smartseqcells$cellname)
smartseqcells$value=1
colnames(smartseqcells)<-c("cellname", "value")
#file.list=(dir(path = "~/CF_Sequencing/work_dir/rvidal/Heart_Aging_Ramon/complete_new_seq/BISMARK/", pattern = "_val_1_bismark_bt2_pe.deduplicated.bismark.cov.gz.chr.txt$", full.names = TRUE, recursive = FALSE))
######################################
annot_cells<-as.data.frame(pbmc@meta.data)
annot_cells$manual_annotation<-"none"
annot_cells[annot_cells$tree.ident=="1",]$manual_annotation<-"cardiomyocytes"
annot_cells[annot_cells$tree.ident=="2",]$manual_annotation<-"macrophages"
annot_cells[annot_cells$tree.ident=="3",]$manual_annotation<-"endocardial"
annot_cells[annot_cells$tree.ident=="4",]$manual_annotation<-"fibroblasts"
annot_cells[annot_cells$tree.ident=="5",]$manual_annotation<-"unknown"
annot_cells[annot_cells$tree.ident=="6",]$manual_annotation<-"endothelial"##
viz_df$Row.names<-gsub("_S.+", "", viz_df$Row.names)
viz_df$Row.names<-paste(sapply(strsplit(viz_df$Row.names,"_"), `[`, 2), sapply(strsplit(viz_df$Row.names,"_"), `[`, 1), sep="_")
rownames(annot_cells)<-gsub("_\\S.+_", "_", rownames(annot_cells))
rownames(annot_cells)<-gsub("L001", "8104", rownames(annot_cells))
rownames(annot_cells)<-gsub("L002", "8249", rownames(annot_cells))
rownames(annot_cells)<-gsub("L003", "8250", rownames(annot_cells))
rownames(annot_cells)<-gsub("L004", "8251", rownames(annot_cells))
rownames(annot_cells)<-gsub("L005", "8253", rownames(annot_cells))
rownames(annot_cells)<-gsub("L006", "8254", rownames(annot_cells))
viz_df_annot<-merge(viz_df, smartseqcells, by.x="Row.names", by.y="cellname", all.x=TRUE)
viz_df_annot<-merge(viz_df, annot_cells, by.x="Row.names", by.y="row.names", all.x=TRUE)
annotation_new<-read.csv("/Volumes/fast/AG_Sauer/projects/rvidal_RData/annotation_smartseq.csv", header=TRUE)
annotation_new$X<-gsub("_\\S.+_", "_", annotation_new$X)
annotation_new$X<-gsub("L001", "8104", annotation_new$X)
annotation_new$X<-gsub("L002", "8249", annotation_new$X)
annotation_new$X<-gsub("L003", "8250", annotation_new$X)
annotation_new$X<-gsub("L004", "8251", annotation_new$X)
annotation_new$X<-gsub("L005", "8253", annotation_new$X)
annotation_new$X<-gsub("L006", "8254", annotation_new$X)
viz_df_annot2<-merge(viz_df_annot, annotation_new, by.x="Row.names", by.y="X", all.x=TRUE)
ggplot(viz_df_annot2, aes(V1, V2, color = phen)) +
geom_point()
ggplot(viz_df_annot, aes(V1, V2, color = manual_annotation)) +
geom_point()
ggplot(viz_df_annot2, aes(V1, V2, color = phenotype)) +
geom_point()
library(rtracklayer) #bioconductor
library(Seurat)
?NormalizeData
?scaleData
ScaleData()
?ScaleData()
library(GeneOverlap)
data(GeneOverlap)
All<-read.csv("~/Dropbox/MDC-Work/Gottingen/to_cluster2.csv", sep="\t", header=FALSE)
head(All)
All$V4<-paste(All$V1, All$V2, sep="-")
All<-All[!duplicated(All$V4),]
All<-All[order((All$V4)),]
rownames(All)<-All$V4
All$V4<-NULL
All$V1<-NULL
All$V2<-NULL
(rownames(All))
#C14<-read.csv("P53-Notch/Overlap.txt", header=FALSE, sep="\t",quote="", as.is = TRUE)
#C15<-read.csv("P53-Notch/Mi1.txt", header=FALSE, sep="\t",quote="", as.is = TRUE)
#C16<-read.csv("P53-Notch/VP.txt", header=FALSE, sep="\t",quote="", as.is = TRUE)
List1<-list(unlist(strsplit(as.character(All[1,]), ',')),  unlist(strsplit(as.character(All[2,]), ',')), unlist(strsplit(as.character(All[3,]), ',')), unlist(strsplit(as.character(All[4,]), ',')), unlist(strsplit(as.character(All[5,]), ',')), unlist(strsplit(as.character(All[6,]), ',')), unlist(strsplit(as.character(All[7,]), ',')), unlist(strsplit(as.character(All[8,]), ',')), unlist(strsplit(as.character(All[9,]), ',')), unlist(strsplit(as.character(All[10,]), ',')), unlist(strsplit(as.character(All[11,]), ',')), unlist(strsplit(as.character(All[12,]), ',')), unlist(strsplit(as.character(All[13,]), ',')), unlist(strsplit(as.character(All[14,]), ',')), unlist(strsplit(as.character(All[15,]), ',')), unlist(strsplit(as.character(All[16,]), ',')), unlist(strsplit(as.character(All[17,]), ',')), unlist(strsplit(as.character(All[18,]), ',')), unlist(strsplit(as.character(All[19,]), ',')), unlist(strsplit(as.character(All[20,]), ',')), unlist(strsplit(as.character(All[21,]), ',')), unlist(strsplit(as.character(All[22,]), ',')), unlist(strsplit(as.character(All[23,]), ',')), unlist(strsplit(as.character(All[24,]), ',')), unlist(strsplit(as.character(All[25,]), ',')), unlist(strsplit(as.character(All[26,]), ',')), unlist(strsplit(as.character(All[27,]), ',')), unlist(strsplit(as.character(All[28,]), ',')), unlist(strsplit(as.character(All[29,]), ',')), unlist(strsplit(as.character(All[30,]), ',')), unlist(strsplit(as.character(All[31,]), ',')), unlist(strsplit(as.character(All[32,]), ',')), unlist(strsplit(as.character(All[33,]), ',')), unlist(strsplit(as.character(All[34,]), ',')),
unlist(strsplit(as.character(All[35,]), ',')),unlist(strsplit(as.character(All[36,]), ',')),unlist(strsplit(as.character(All[37,]), ',')),unlist(strsplit(as.character(All[38,]), ',')),unlist(strsplit(as.character(All[39,]), ',')),unlist(strsplit(as.character(All[40,]), ',')),unlist(strsplit(as.character(All[41,]), ',')),unlist(strsplit(as.character(All[42,]), ',')),unlist(strsplit(as.character(All[43,]), ',')),unlist(strsplit(as.character(All[44,]), ',')),unlist(strsplit(as.character(All[45,]), ',')),unlist(strsplit(as.character(All[46,]), ',')),unlist(strsplit(as.character(All[47,]), ',')),unlist(strsplit(as.character(All[48,]), ',')),unlist(strsplit(as.character(All[49,]), ',')),unlist(strsplit(as.character(All[50,]), ',')),unlist(strsplit(as.character(All[51,]), ',')),unlist(strsplit(as.character(All[52,]), ',')),unlist(strsplit(as.character(All[53,]), ',')),unlist(strsplit(as.character(All[54,]), ',')),unlist(strsplit(as.character(All[55,]), ',')),unlist(strsplit(as.character(All[56,]), ',')),unlist(strsplit(as.character(All[57,]), ',')),unlist(strsplit(as.character(All[58,]), ',')),unlist(strsplit(as.character(All[59,]), ',')),unlist(strsplit(as.character(All[60,]), ',')),unlist(strsplit(as.character(All[61,]), ',')),unlist(strsplit(as.character(All[62,]), ',')),unlist(strsplit(as.character(All[63,]), ',')),unlist(strsplit(as.character(All[64,]), ',')),unlist(strsplit(as.character(All[65,]), ',')),unlist(strsplit(as.character(All[66,]), ',')),unlist(strsplit(as.character(All[67,]), ',')),unlist(strsplit(as.character(All[68,]), ',')),unlist(strsplit(as.character(All[69,]), ',')),unlist(strsplit(as.character(All[70,]), ',')),unlist(strsplit(as.character(All[71,]), ',')),unlist(strsplit(as.character(All[72,]), ',')),unlist(strsplit(as.character(All[73,]), ',')),unlist(strsplit(as.character(All[74,]), ',')),unlist(strsplit(as.character(All[75,]), ',')),unlist(strsplit(as.character(All[76,]), ',')),unlist(strsplit(as.character(All[77,]), ',')),unlist(strsplit(as.character(All[78,]), ',')),unlist(strsplit(as.character(All[79,]), ',')),unlist(strsplit(as.character(All[80,]), ',')),unlist(strsplit(as.character(All[81,]), ',')),unlist(strsplit(as.character(All[82,]), ',')),unlist(strsplit(as.character(All[83,]), ',')),unlist(strsplit(as.character(All[84,]), ',')),unlist(strsplit(as.character(All[85,]), ',')),unlist(strsplit(as.character(All[86,]), ',')),unlist(strsplit(as.character(All[87,]), ',')),unlist(strsplit(as.character(All[88,]), ',')),unlist(strsplit(as.character(All[89,]), ',')),unlist(strsplit(as.character(All[90,]), ',')),unlist(strsplit(as.character(All[91,]), ',')),unlist(strsplit(as.character(All[92,]), ',')),unlist(strsplit(as.character(All[93,]), ',')),unlist(strsplit(as.character(All[94,]), ',')),unlist(strsplit(as.character(All[95,]), ',')),unlist(strsplit(as.character(All[96,]), ',')),unlist(strsplit(as.character(All[97,]), ',')),unlist(strsplit(as.character(All[98,]), ',')),unlist(strsplit(as.character(All[99,]), ',')),unlist(strsplit(as.character(All[100,]), ',')),unlist(strsplit(as.character(All[101,]), ',')),unlist(strsplit(as.character(All[102,]), ',')),unlist(strsplit(as.character(All[103,]), ',')),unlist(strsplit(as.character(All[104,]), ',')),unlist(strsplit(as.character(All[105,]), ',')),unlist(strsplit(as.character(All[106,]), ',')),unlist(strsplit(as.character(All[107,]), ',')),unlist(strsplit(as.character(All[108,]), ',')),unlist(strsplit(as.character(All[109,]), ',')),unlist(strsplit(as.character(All[110,]), ',')) )
names(List1)<-c("1", "2","3","4","5","6","7","8","9","10",
"11","12","13","14","15","16","17","18","19","20",
"21","22","23","24","25","26","27","28","29","30",
"31","32","33","34","35","36","37","38","39","40",
"41","42","43","44","45","46","47","48","49","50",
"51","52","53","54","55","56","57","58","59","60",
"61","62","63","64","65","66","67","68","69","70","71",
"72","73","74","75","76","77","78","79","80","81","82",
"83","84","85","86","87","88","89","90","91","92","93",
"94","95","96","97","98","99","100","101","102","103","104",
"105","106","107","108","109","110")
rownames(All)
RNASeq=30000
gom.obj <- newGOM(List1, List1, gs.RNASeq)
gom.obj <- newGOM(List1, List1, gs.RNASeq)
matrix_test<-getMatrix(gom.obj, name="pval")
pdf("/Users/rvidal/heatmap.pdf")
H<-drawHeatmap(gom.obj, what="Jaccard", log.scale=T,adj.p=T, cutoff=.05)
dev.off()
dev.off()
library(Seurat)
library(dplyr)
library(tidyr)
read.csv("/Users/rvidal/Dropbox/Manuscripts/HeartscMethylome/Tables/markers_roc.csv", sep="\t", header = TRUE, row.names=1)
setwd("~/Dropbox/GIT/RCodes/punyplatypus/R/")
markers<-read.csv("/Users/rvidal/Dropbox/Manuscripts/HeartscMethylome/Tables/markers_roc.csv", sep="\t", header = TRUE, row.names=1)
setwd("~/Dropbox/GIT/RCodes/punyplatypus/R/")
celltypes(markers, "mouse")
celltypes <- function(markers, species="mouse"){
markers<-markers[, c(2,6,7)]
markers$gene<-toupper(markers$gene)
split_list<- split(markers,markers$cluster)
all_genes_dataset<-unique(markers$gene)
markerSet<-markersSet(species=species)
markerSet_freq<-table(markerSet$official.gene.symbol)
weights = as.data.frame(1+sqrt(((max(markerSet_freq)-markerSet_freq)/(max(markerSet_freq)-min(markerSet_freq)))))
split_list_marker<- split(markerSet,markerSet$cell.type)
all_genes_markers<-unique(markerSet$official.gene.symbol)
for (i in 1:length(split_list)){
results=NA
names(results)<-"None"
cluster<-as.data.frame(split_list[[i]])
cluster<-merge(cluster, weights[weights$Var1 %in% cluster$gene,], by.x="gene", by.y="Var1")
for (j in 1:length(split_list_marker)){
markers_cellT<-as.data.frame(split_list_marker[[j]])
markers_cellT<-merge(markers_cellT, weights[weights$Var1 %in% markers_cellT$official.gene.symbol,], by.x="official.gene.symbol", by.y="Var1")
#how many expressed genesets are found in the geneset?
ct_exp<-(intersect(cluster$gene,markers_cellT$official.gene.symbol))
# how many _non_ expressed genes are found in the geneset?
diff_gene_dataset<-setdiff(all_genes_dataset, ct_exp)
ct_non_exp<-(intersect(diff_gene_dataset,markers_cellT$official.gene.symbol))
# how many expressed genes are NOT found in the geneset?
ct_exp_not_found<-setdiff(cluster$gene,markers_cellT$official.gene.symbol)
# how many _non_ expressed genes are NOT found in the geneset?
not_exp_not_found_in_geneset<-(setdiff(diff_gene_dataset, markers_cellT$official.gene.symbol))
odds<-fisher.test(matrix(c(length(ct_exp), length(ct_non_exp), length(ct_exp_not_found), length(not_exp_not_found_in_geneset)),  nrow = 2))
if(odds$p.value<0.05){
#print(unique(as.character(cluster$cluster)))
#print(unique(as.character(markers_cellT$cell.type)))
#print(odds$p.value)
fish<-odds$p.value
names(fish)<-unique(as.character(markers_cellT$cell.type))
results<-c(results, fish)
}
}
print(unique(as.character(cluster$cluster)))
print(sort(results))
}
}
markersSet <- function(species="mouse"){
ma<-read.csv("markers/markers.tsv", sep="\t")
if (species == 'mouse'){
s = 'Mm'
}else{
s = 'Hs'
}
ma<-ma[grepl(s, ma$species),]
ma<-ma[ma$ubiquitousness.index<0.05,]
ma_ss<-ma[,2:3]
return(ma_ss)
}
celltypes(markers, "mouse")
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2)
setwd("~/Dropbox/GIT/RCodes/punyplatypus/")
BiocInstaller::install("roxygen2")
BiocManager::install("roxygen2")
#devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2)
BiocManager::install("purrr")
#devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2)
BiocManager::install("purrr")
#devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2)
devtools::install_github("ramonvidal/punyplatypus")
devtools::install_github("ramonvidal/punyplatypus", force=T)
BiocManager::install("biomaRt")
devtools::install_github("ramonvidal/punyplatypus", force=T)
BiocManager::install("biomaRt")
